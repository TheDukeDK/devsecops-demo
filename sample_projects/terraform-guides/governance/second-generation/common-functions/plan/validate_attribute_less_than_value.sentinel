# Validate that all instances of a specified resource type being modified have
# a specified top-level attribute with a value less than or equal to a max value
validate_attribute_less_than_value = func(type, attribute, max_value) {

  validated = true

  # Get all resource instances of the specified type
  resource_instances = find_resources_from_plan(type)

  # Loop through the resource instances
  for resource_instances as address, r {

    # Skip resource instances that are being destroyed
    # to avoid unnecessary policy violations.
    # Used to be: if length(r.diff) == 0
    if r.destroy and not r.requires_new {
      print("Skipping resource", address, "that is being destroyed.")
      continue
    }

    # Determine if the attribute is computed
    if r.diff[attribute].computed else false is true {
      print("Resource", address, "has attribute", attribute,
            "that is computed.")
      # If you want computed values to cause the policy to fail,
      # uncomment the next line.
      # validated = false
    } else {
      # Validate that the attribute exists
      if r.applied[attribute] else null is not null {
        # Validate that each instance has desired value
        if float(r.applied[attribute]) > max_value {
          print("Resource", address, "has attribute", attribute, "with value",
                r.applied[attribute], "that is greater than the maximum allowed",
                "value:", max_value)
          validated = false
        }
      } else {
        # The attribute did not exist
        print("Resource", address, "is missing attribute", attribute)
        validated = false
      } // end attribute exists check

    } // end computed check

  } // end resource instances

  return validated
}
