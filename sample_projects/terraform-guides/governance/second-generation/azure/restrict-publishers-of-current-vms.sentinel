# This policy uses the Sentinel tfstate import to require that
# all existing Azure VMs have publishers from a specified list

##### Imports #####

import "tfstate"
import "strings"
import "types"

##### Functions #####

# Find all resources of specific type from all modules using the tfstate import
find_resources_from_state = func(type) {

  resources = {}

  # Iterate over all modules in the tfstate import
  for tfstate.module_paths else [] as path {
    # Iterate over the named resources of desired type in the module
    for tfstate.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}

# Validate that all Azure VMs already in the state have a publisher from the
# allowed_publishers list
validate_publishers = func(allowed_publishers) {

  validated = true

  # Get all Azure VMs
  resource_instances = find_resources_from_state("azurerm_virtual_machine")

  # Loop through the resource instances
  for resource_instances as address, r {

    # Validate that storage_image_reference exists and is a list
    if types.type_of(r.attr.storage_image_reference) else "" is not "list" {
      print("VM", address, "has storage_image_reference attribute that is",
            "missing or is not a list")
    } else {
      # Validate that each VM has allowed value
      if r.attr.storage_image_reference[0].publisher not in allowed_publishers {
        print("VM", address, "has attribute publisher",
              "with value", r.attr.storage_image_reference[0].publisher,
              "that is not in the allowed list:", allowed_publishers)
        validated = false
      }
    } // end storage_image_reference check

  } // end resource instances

  return validated
}

##### Lists #####

# List of allowed publishers
allowed_publishers = [
  "RedHat",
  "Canonical",
]

##### Rules #####

# Call the validation function
publishers_validated = validate_publishers(allowed_publishers)

# Main rule
main = rule {
  publishers_validated
}
