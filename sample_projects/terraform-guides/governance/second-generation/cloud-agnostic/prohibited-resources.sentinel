# This policy prevents prohibited resources from being used.

##### Imports #####

import "tfplan"
import "strings"

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}

# Validate that prohibited resources are not present
validate_resources = func(prohibited_list)  {
  valid = true

  for prohibited_list as type {
    found_resources = find_resources_from_plan(type)

    for found_resources as address, r {
      print("Prohibited resource", address, "was found that is",
            "in the prohibited list", prohibited_list)
      valid = false
    }
  }
  return valid
}

##### Lists #####

# List of prohibited resources
prohibited_list = [
  "aws_vpc",
]

##### Rules #####

# Call the validation function
resources_validated = validate_resources(prohibited_list)

# Main rule
main = rule {
  resources_validated
}
