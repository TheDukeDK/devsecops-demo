# This policy prevents the use of prohibited datasources
# using the tfconfig import

##### Imports #####
import "tfconfig"
import "strings"

##### Functions #####

# Find all datasources of specific type from all modules
# using the tfconfig import
find_datasources_from_config = func(type) {

  datasources = {}

  # Iterate over all modules in the tfconfig import
  for tfconfig.module_paths as path {
    # Iterate over the named datasources of desired type in the module
    for tfconfig.module(path).data[type] else {} as name, d {

      # Get the address of the datasource
      if length(path) == 0 {
        # root module
        address = type + "." + name
      } else {
        # non-root module
        address = "module." + strings.join(path, ".module.") + "." +
                  type + "." + name
      }

      # Add the datasource to datasources map, setting the key to the address
      datasources[address] = d
    }
  }

  return datasources
}


# Validate that prohibited datasources are not present
validate_datasources = func(prohibited_list) {
  valid = true

  for prohibited_list as type {
    found_datasources = find_datasources_from_config(type)

    for found_datasources as address, d {
      print("Datasource", address, "was found that is",
            "in the prohibited list", prohibited_list)
      valid = false
    }
  }
  return valid
}

##### Lists #####

# List of prohibited datasources
prohibited_list = [
  "external",
  "http",
]

##### Rules #####

# Call the validation function
datasources_validated = validate_datasources(prohibited_list)

# Main rule
main = rule {
  datasources_validated
}
