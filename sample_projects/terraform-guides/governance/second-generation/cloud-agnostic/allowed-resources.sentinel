# This policy prevents any changes to resources that are not in
# an allowed list

##### Imports #####

import "tfplan"

##### Functions #####

# Find all resource types from all modules using the tfplan import
find_resource_types_from_plan = func() {

  types = []

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Find all types of resources used in the module
    for tfplan.module(path).resources else {} as type {
        #print("type is:", type)
        # Add the type to the types list
        append(types, type)
    }
  }

  return types
}

# Validate that disallowed resources are not present
validate_resources = func(allowed_list) {
  valid = true

  found_types = find_resource_types_from_plan()

  for found_types as type {
    if type not in allowed_list {
      print("Type", type, "is not in the list of allowed resources", allowed_list)
      valid = false
    }
  }
  return valid
}

##### Lists #####

# List of allowed resources
allowed_list = [
  "aws_vpc",
  "aws_instance",
]

##### Rules #####

# Call the validation function
resources_validated = validate_resources(allowed_list)

# Main rule
main = rule {
  resources_validated
}
