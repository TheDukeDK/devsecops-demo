# This policy uses the Sentinel tfconfig import to prevent
# remote-exec provisioners from being run on null resources

##### Imports #####

import "tfconfig"
import "strings"

##### Functions #####

# Find all resources of specific type from all modules using the tfconfig import
find_resources_from_config = func(type) {

  resources = {}

  # Iterate over all modules in the tfconfig import
  for tfconfig.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfconfig.module(path).resources[type] else {} as name, r {

      # Get the address of the instance
      if length(path) == 0 {
        # root module
        address = type + "." + name
      } else {
        # non-root module
        address = "module." + strings.join(path, ".module.") + "." +
                  type + "." + name
      }

      # Add the resource to resources map, setting the key to the address
      resources[address] = r
    }
  }
  return resources
}

# Validate that no remote-exec provisioners used with null resources
validate_provisioners = func() {

  validated = true

  # Get all null resources
  resources = find_resources_from_config("null_resource")

  # Loop through the resource instances
  for resources as address, r {
    # Loop over provisioners
    for r.provisioners as p {
      # Make sure provisioner type is not a remote
      if p.type is "remote-exec" {
        print(address, "has remote-exec provisioner which is not allowed")
        validated = false
      }
    }

  } // end resource instances

  return validated
}

##### Rules #####

# Call the validation function
no_remote_exec_on_null_resources = validate_provisioners()

# Main rule
main = rule {
  no_remote_exec_on_null_resources
}
