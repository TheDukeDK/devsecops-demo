# This policy uses the HTTP import to call the TFC API to get a list of all
# modules in a specified module registry and determine their
# latest versions. It then uses the tfconfig import to inspect all non-root
# modules and validate that those sourced from the registry use the latest versions.

# Note that this requires the Sentinel runtime 0.13.0 or higher.
# Additionally, this policy uses Sentinel parameters
# Be sure to read the associated use-latest-module-versions.md file.

##### Imports #####
import "tfconfig"
import "http"
import "strings"
import "json"
import "types"

##### Parameters #####

# A boolean indicating whether the public Terraform registry is being used
param public_registry default false

# The address of the Terraform Cloud or Terraform Enterprise server
param address default "app.terraform.io"

# The name of the Terraform Cloud or Terraform Enterprise organization
param organization

# A valid Terraform Cloud or Terraform Enterprise API token
param token


##### Functions #####

# Retrieve modules from a module registry and give their paths and versions
retrieve_latest_module_versions = func(public_registry, address, organization, token) {

  # Call the TFC Modules API and extract the response
  if public_registry {
    # We are limiting the request to 20 verified modules for the
    # namespace in the public registry matching the organzation parameter
    req = http.request("https://" + address + "/v1/modules/"  +
                       organization + "?limit=20&verified=true")
  } else {
    req = http.request("https://" + address + "/api/registry/v1/modules/"  +
                       organization)
    req = req.with_header("Authorization", "Bearer " + token)
  }
  res = json.unmarshal(http.get(req).body)

  modules = {}

  # Iterate over the modules and extract names, providers, and latest versions
  for res.modules as m {
    index = m.namespace + "/" + m.name + "/" + m.provider
    modules[index] = m.version
  }

  # modules is indexed by <name>/<provider> and contains most recent version
  return modules
}

# Validate sources of modules in the registry
validate_modules = func(public_registry, address, organization, token) {

  validated = true

  # Get latest module versions from registry
  discovered_modules = retrieve_latest_module_versions(public_registry, address,
                       organization, token)

  # Iterate over all modules in the tfconfig import
  for tfconfig.module_paths as path {
    the_modules = tfconfig.module(path).modules
    # Iterate over modules of the current module
    for the_modules as name, m {
      # Check if module is in the PMR
      if strings.has_prefix(m.source, address + "/" + organization) {
        # Check version of module against latest version in PMR
        org_name_provider = strings.trim_prefix(m.source, address + "/")
        if m.version is not discovered_modules[org_name_provider] {
          if length(path) == 0 {
            # root module
            print("PMR module", m.source, "used in root module has version",
                  m.version, "that is not the most recent version",
                  discovered_modules[org_name_provider])
            validated = false
          } else {
            # non-root module
            module_address = "module." + strings.join(path, ".module.")
            print("PMR module", m.source, "used in module", module_address,
                  "has version", m.version, "that is not the most recent",
                  "version", discovered_modules[org_name_provider])
            validated = false
          }

        } // end version check
      } else {
        # Check version of module against latest version in public registry
        if m.source in keys(discovered_modules) and
           m.version is not discovered_modules[m.source] {
          if length(path) == 0 {
            # root module
            print("Public registry module", m.source, "used in root module",
                  "has version", m.version, "that is not the most recent version",
                  discovered_modules[m.source])
            validated = false
          } else {
            # non-root module
            module_address = "module." + strings.join(path, ".module.")
            print("Public registry module", m.source, "used in module", module_address,
                  "has version", m.version, "that is not the most recent",
                  "version", discovered_modules[m.source])
            validated = false
          }

        } // end version check

      } // end if module in PMR or public registry
    } // end for modules
  } // end module paths

  return validated
}

##### Rules #####

# Call the validation function
modules_validated = validate_modules(public_registry, address, organization, token)

# Main rule
main = rule {
  modules_validated
}
