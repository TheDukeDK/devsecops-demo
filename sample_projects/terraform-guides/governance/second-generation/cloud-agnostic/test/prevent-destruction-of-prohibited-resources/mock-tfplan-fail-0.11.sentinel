import "strings"
import "types"

_modules = {
	"root": {
		"data": {},
		"path": [],
		"resources": {
			"azurerm_network_interface": {
				"main": {
					0: {
						"destroy":      true,
						"diff":         {},
						"requires_new": false,
					},
				},
			},
			"azurerm_resource_group": {
				"main": {
					0: {
						"destroy":      true,
						"diff":         {},
						"requires_new": false,
					},
				},
			},
			"azurerm_subnet": {
				"internal": {
					0: {
						"destroy":      true,
						"diff":         {},
						"requires_new": false,
					},
				},
			},
			"azurerm_virtual_machine": {
				"demo": {
					0: {
						"destroy":      true,
						"diff":         {},
						"requires_new": false,
					},
				},
			},
			"azurerm_virtual_network": {
				"main": {
					0: {
						"destroy":      true,
						"diff":         {},
						"requires_new": false,
					},
				},
			},
		},
	},
}

module_paths = [
	[],
]

terraform_version = "0.11.14"

variables = {
	"prefix":  "azure-demo",
	"vm_size": "Standard_A1",
}

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
path = _modules.root.path
resources = _modules.root.resources